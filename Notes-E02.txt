- Run npm init to add package.json to our project.

- To add any new dependency in a npm using project we run command npm install <package name> or npm install -D <package name> , the -D here is for dev dependencies.

- We can also write npm i <package name>, it works perfectly as well.

- We don't push node_modules folder to git or production as it is bulky and unnecessary to store.

- By running npm install command we can regenrate our node_modules folder as long as we have our package file 

- Instead of clicking on our file and loading it from folders into browser we can host our app on local server with the help of parser, we only need to run the command "npx parcel index.html" to have a dev build; To get a prod build we use the command "npx parcel build index.html".

- Mostly npx is used to execute a module/package.

- Parcel does a lot more things then just bundling or hosting, read about them in detail on "https://parceljs.org", also checkout "https://webpack.js.org/" Webpack is also a bundler similar to parcel.

- Parcel helps in caching, image optimisation, bundling, compressing, minification, build local server, HMR (Hot Module Replacement), consistent hashing, code splitting, diagnostics, error handling, https, tree shaking (remove unused code), differential bundling (support older browsers) etc.

- Whenever we make a build in local, parcel caches the build and save that in '.parcel-cache' folder and then in subsequent builds the time taken is reduced drastically.

- Whenever Dev or Prod builds are made using parcel it creates a  folder (dist) which contains all useful and build ready files (i.e. minified, compressed etc).

- We can set the browser compatibility of our app by writing configuration for browserslist array in package.json, for more info visit "https://browserslist.dev"